name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run unit tests
        run: npm run test -- --watch=false --browsers=ChromeHeadless --code-coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/

  e2e:
    runs-on: ubuntu-latest

    needs: test

    services:
      chrome:
        image: selenium/standalone-chrome:latest
        ports:
          - 4444:4444
        options: >-
          --health-cmd "/opt/bin/health-check.sh"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start application
        run: |
          npm run start &
          sleep 30
        env:
          CI: true

      - name: Run E2E tests
        run: npm run e2e
        env:
          CHROME_BIN: /usr/bin/google-chrome
          CHROME_HEADLESS: true
          SELENIUM_ADDRESS: http://localhost:4444/wd/hub

  security:
    runs-on: ubuntu-latest

    needs: test

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN || '' }}
        with:
          args: --severity-threshold=high

  performance:
    runs-on: ubuntu-latest

    needs: test

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN || '' }}

  deploy-staging:
    runs-on: ubuntu-latest

    needs: [test, e2e, security, performance]

    if: github.ref == 'refs/heads/develop'

    environment: staging

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build:staging
        env:
          NODE_ENV: staging

      - name: Deploy to staging
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN || '' }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID || '' }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID || '' }}
          vercel-args: '--prod'

  deploy-production:
    runs-on: ubuntu-latest

    needs: [test, e2e, security, performance]

    if: github.ref == 'refs/heads/main'

    environment: production

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build:prod
        env:
          NODE_ENV: production

      - name: Deploy to production
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN || '' }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID || '' }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID || '' }}
          vercel-args: '--prod'

      - name: Notify deployment
        run: |
          curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
            -H 'Content-type: application/json' \
            -d '{
              "text": "ðŸš€ Production deployment completed for CI-Tender platform",
              "attachments": [{
                "fields": [
                  {
                    "title": "Environment",
                    "value": "Production",
                    "short": true
                  },
                  {
                    "title": "Commit",
                    "value": "${{ github.sha }}",
                    "short": true
                  },
                  {
                    "title": "Author",
                    "value": "${{ github.actor }}",
                    "short": true
                  }
                ]
              }]
            }'

  monitoring:
    runs-on: ubuntu-latest

    needs: deploy-production

    if: github.ref == 'refs/heads/main'

    steps:
      - name: Health check
        run: |
          curl -f ${{ secrets.PRODUCTION_URL || 'https://example.com' }}/health || exit 1

      - name: Performance monitoring
        run: |
          curl -X POST ${{ secrets.MONITORING_WEBHOOK || 'https://example.com/webhook' }} \
            -H 'Content-type: application/json' \
            -d '{
              "event": "deployment_completed",
              "environment": "production",
              "timestamp": "${{ github.event.head_commit.timestamp }}"
            }'
